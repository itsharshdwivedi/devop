Demonstrate the creation of a project in a remote repository and apply concepts like fork, merge, diff, merge conflict, branches, and pull requests using GitHub:

---

 Step 1: Create a Folder Locally
1. Create a folder on your Desktop (e.g., `MyGitHubProject`).
2. Open the folder in your terminal (Command Prompt, Git Bash, or any terminal of your choice).

---

 Step 2: Create a GitHub Repository
1. Go to your GitHub account.
2. Click on New Repository.
3. Name the repository (e.g., `MyGitHubProject`).
4. Check Add a README.md.
5. Click Create Repository.

---

 Step 3: Clone the Repository Locally
1. Copy the repository URL from GitHub.
2. In your terminal, run:
   ```bash
   git clone <repository-url>
   ```
   This will create a copy of the repository in your local folder.
3. Navigate into the repository folder:
   ```bash
   cd MyGitHubProject
   ```

---

 Step 4: Create a New Branch
1. Create a new branch:
   ```bash
   git branch feature-branch
   ```
2. Switch to the new branch:
   ```bash
   git checkout feature-branch
   ```

---

 Step 5: Make Changes in the New Branch
1. Add a new file in your folder (e.g., `feature.txt`) and add some content.
2. Stage and commit the changes:
   ```bash
   git add .
   git commit -m "Add feature.txt file"
   ```
3. Push the changes to the remote branch:
   ```bash
   git push -u origin feature-branch
   ```

---

 Step 6: Make Changes in the Main Branch
1. Switch back to the main branch:
   ```bash
   git checkout main
   ```
2. Make changes in an existing file (e.g., `README.md`) or add a new file (e.g., `main_changes.txt`).
3. Stage and commit the changes:
   ```bash
   git add .
   git commit -m "Make changes in main branch"
   ```
4. Push the changes to the remote repository:
   ```bash
   git push origin main
   ```

---

 Step 7: Create a Pull Request and Merge
1. Go to the GitHub repository.
2. Click on the Pull Requests tab.
3. Click New Pull Request and select `feature-branch` to merge into `main`.
4. Click Create Pull Request.

---

 Step 8: Resolve Merge Conflict
If there are conflicting changes:
1. GitHub will show the conflict in the Pull Request.
2. Resolve the conflict by editing the conflicting file(s) directly in GitHub or locally.
3. After resolving, commit the changes:
   ```bash
   git add .
   git commit -m "Resolve merge conflict"
   ```
4. Push the updated branch:
   ```bash
   git push origin feature-branch
   ```
5. Merge the Pull Request on GitHub by clicking Merge Pull Request → Confirm Merge.

---

 Step 9: Fork the Repository
1. Log in to another GitHub account (or ask a collaborator).
2. Go to the original repository and click Fork.
3. Clone the forked repository to the local machine:
   ```bash
   git clone <forked-repository-url>
   ```

---

 Step 10: Make Changes in the Fork
1. Make changes in the forked repository, commit them, and push them to the forked repository's main branch.
   ```bash
   git add .
   git commit -m "Changes in forked repository"
   git push origin main
   ```

---

 Step 11: Submit a Pull Request from Fork
1. Go to the original repository on GitHub.
2. Click on the Pull Requests tab.
3. Click New Pull Request and select the forked repository's branch to merge into the original repository.

---

 Step 12: Use `git diff` Locally
1. Compare changes between branches:
   ```bash
   git diff main feature-branch
   ```
   This shows the differences between the `main` branch and the `feature-branch`.

---

 Final Notes:
- You’ve now demonstrated key GitHub concepts: fork, branch, merge, diff, merge conflict, and pull requests.
- This process can be replicated with multiple collaborators or on a shared team project.
